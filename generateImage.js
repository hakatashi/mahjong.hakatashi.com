const path = require('path');
const jsdom = require('jsdom/lib/old-api');
const {promise: datauri} = require('datauri');
const xmlserializer = require('xmlserializer');
const unique = require('array-unique').immutable;
const svg2png = require('svg2png');

const fileNameMap = new Map([
	...([
		'Ton',
		'Nan',
		'Shaa',
		'Pei',
		'Chun',
		'Hatsu',
		'Haku',
		...(Array.from({length: 9}, (e, i) => `Man${i + 1}`)),
		...(Array.from({length: 9}, (e, i) => `Sou${i + 1}`)),
		...(Array.from({length: 9}, (e, i) => `Pin${i + 1}`)),
	].map((name, index) => [index + 0x1F000, name])),
	[0x1F02B, 'Haku'],
]);

const ç‰ŒToFileName = (ç‰Œ) => {
	const fileName = fileNameMap.get(ç‰Œ.codePointAt(0)) || ç‰Œ;

	if (Array.from(ç‰Œ)[1] === '\uFE00') {
		return `${fileName}-Dora`;
	}

	return fileName;
};

const fixHref = (node) => {
	node.setAttribute('xlink:href', node.getAttribute('href'));
};

module.exports = async ({æ‰‹ç‰Œ, çŽ‹ç‰Œ, çŽ‹ç‰ŒStatus}) => {
	const çŽ‹ç‰ŒAreaHeight = 150;
	const çŽ‹ç‰ŒScale = 0.6;
	const imageWidth = 900;
	const imageHeight = 150 + (çŽ‹ç‰Œ === null ? 0 : çŽ‹ç‰ŒAreaHeight);
	const ç‰ŒSize = 60;
	const printSize = 0.85;

	const uniqueæ‰‹ç‰Œ = unique([
		...æ‰‹ç‰Œ,
		...(çŽ‹ç‰Œ === null ? [] : çŽ‹ç‰Œ),
	]);

	const ç‰ŒImages = await Promise.all(
		[...uniqueæ‰‹ç‰Œ, 'Front', 'Back'].map(async (ç‰Œ) => {
			const uri = await datauri(path.join(...[
				__dirname,
				'riichi-mahjong-tiles',
				'Export',
				'Regular',
				`${ç‰ŒToFileName(ç‰Œ)}.png`,
			]));
			return [ç‰Œ, uri];
		})
	);

	const ç‰ŒImageMap = new Map(ç‰ŒImages);

	const window = await new Promise((resolve, reject) => {
		jsdom.env('', [require.resolve('snapsvg')], (error, windowObject) => {
			if (error) {
				reject(error);
			} else {
				resolve(windowObject);
			}
		});
	});

	const {Snap} = window;

	const paper = Snap(imageWidth, imageHeight);
	const imageOffsetX = (imageWidth - ç‰ŒSize * 14.5) / 2;
	const imageOffsetY = (imageHeight - ç‰ŒSize / 3 * 4 + (çŽ‹ç‰Œ === null ? 0 : çŽ‹ç‰ŒAreaHeight)) / 2;

	const drawç‰Œ = (ç‰Œ) => {
		const frontImage = paper.image(...[
			ç‰ŒImageMap.get(ç‰Œ === 'ðŸ€«' ? 'Back' : 'Front'),
			0,
			0,
			ç‰ŒSize,
			ç‰ŒSize / 3 * 4,
		]);
		fixHref(frontImage.node);

		if (ç‰Œ === null) {
			return paper.g(frontImage);
		}

		const offsetX = ç‰ŒSize * ((1 - printSize) / 2);
		const offsetY = ç‰ŒSize / 3 * 4 * ((1 - printSize) / 2);
		const image = paper.image(...[
			ç‰ŒImageMap.get(ç‰Œ),
			offsetX,
			offsetY,
			ç‰ŒSize * printSize,
			ç‰ŒSize / 3 * 4 * printSize,
		]);
		fixHref(image.node);

		return paper.g(frontImage, image);
	};

	æ‰‹ç‰Œ.forEach((ç‰Œ, index) => {
		const x = (index === 13 ? index + 0.5 : index) * ç‰ŒSize + imageOffsetX;

		const ç‰ŒGroup = drawç‰Œ(ç‰Œ);
		ç‰ŒGroup.transform(`translate(${x}, ${imageOffsetY})`);
	});

	if (çŽ‹ç‰Œ !== null) {
		çŽ‹ç‰Œ.slice(7, 14).forEach((ç‰Œ, index) => {
			const x = 600 + ç‰ŒSize * çŽ‹ç‰ŒScale * index;
			const y = (imageHeight - ç‰ŒSize * 1.33 - çŽ‹ç‰ŒAreaHeight) / 2 + ç‰ŒSize * 1.33 * çŽ‹ç‰ŒScale + 10;

			const ç™½ç‰ŒGroup = drawç‰Œ(null);
			ç™½ç‰ŒGroup.transform(`translate(${x}, ${y + 10}) scale(${çŽ‹ç‰ŒScale})`);

			const ç‰ŒGroup = drawç‰Œ(ç‰Œ);
			ç‰ŒGroup.transform(`translate(${x}, ${y}) scale(${çŽ‹ç‰ŒScale})`);
		});

		çŽ‹ç‰Œ.slice(0, 7).forEach((ç‰Œ, index) => {
			const x = 600 + ç‰ŒSize * çŽ‹ç‰ŒScale * index;
			const y = (imageHeight - ç‰ŒSize * 1.33 - çŽ‹ç‰ŒAreaHeight) / 2 +
				(çŽ‹ç‰ŒStatus === 'open' ? 0 : ç‰ŒSize * 1.33 * çŽ‹ç‰ŒScale * 0.85);

			const ç™½ç‰ŒGroup = drawç‰Œ(null);
			ç™½ç‰ŒGroup.transform(`translate(${x}, ${y + 10}) scale(${çŽ‹ç‰ŒScale})`);

			const ç‰ŒGroup = drawç‰Œ(ç‰Œ);
			ç‰ŒGroup.transform(`translate(${x}, ${y}) scale(${çŽ‹ç‰ŒScale})`);
		});
	}

	const svg = xmlserializer.serializeToString(paper.node);
	window.close();

	const png = await svg2png(svg);

	return png;
};
